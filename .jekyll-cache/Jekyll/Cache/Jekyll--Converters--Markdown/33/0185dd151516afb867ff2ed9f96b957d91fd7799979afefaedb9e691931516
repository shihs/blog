I"<p>這篇簡單地介紹 MVC 架構，若是有任何錯誤觀念，歡迎留言。</p>

<p>之前用 node.js 的 express 加上 MVC 架構寫了一個 <a href="https://github.com/shihs/to-do-list-app">TO DO LIST</a>，也許有這個例子可以更容易理解。</p>

<hr />

<h2 id="what-is-mvc">What is MVC?</h2>

<p>MVC 的三個字母分別表示 Model、View 和 Controller，是一種在軟體開發時的軟體架構 (architectural pattern) ，由 Trygve Reenskaug 在 1978 年提出，是為了 Smalltalk （一種程式語言）所發明的一種軟體架構（<a href="https://zh.wikipedia.org/wiki/MVC">wiki</a>）。</p>

<p>它的設計原則是「<strong>關注點分離</strong> (separation of concerns, SOC) 」，把不同作用的程式碼放在不同的檔案裡，讓大家各司其職。</p>

<hr />

<h2 id="圖解-mvc">圖解 MVC</h2>

<p>下圖簡單的說明了，MVC 的流程。</p>

<p><img src="https://i.imgur.com/bVwaxlv.jpg" alt="" width="90%" heigh="90%" />
<a href="https://www.hellosanta.com.tw/blog/Graphical-MVC-architecture">圖片來源</a></p>

<p>使用者操作網站與網站互動，當使用者點選網頁發出 request（可能登入、點進連結、加入購物車…..等等）後，<strong>Controller</strong> 會去接收這個 User 傳來的 request，並根據請求和 <strong>Model</strong> 要資料，當 <strong>Model</strong> 吐出資料給 <strong>Controller</strong> 後，<strong>Controller</strong> 再把資料丟給 <strong>View</strong> 讓前端去顯示，這時候 User 就會看到前端顯示出剛剛送出 request 後產生的畫面。</p>

<p>從上面的說明可以發現，<strong>Controller</strong> 扮演了重要的角色，它除了接收使用者的要求，也負責協調工作給 <strong>Model</strong> 與 <strong>View</strong>，讓每個部分都獨立專注在自己的工作，彼此之前不會直接的溝通，都是靠 <strong>Controller</strong> 傳話。</p>

<p>我覺得可以想像成 <strong>View</strong> 和 <strong>Model</strong> 各是一個部門，兩個部門有各自負責的工作且彼此之間不會直接對話與干預彼此，而使用者就是老闆，<strong>Controller</strong> 負責把老闆的任務分配給各部門，並作為各個部門之間溝通與傳遞消息的角色，讓 <strong>View</strong> 和 <strong>Model</strong> 不用知道對方在幹嘛也能讓每個任務順利完成。</p>

<p>舉一個例子，有一個使用者輸入帳號和密碼要登入一個網站，當使用者點選登入後會送出 request 到 <strong>Controller</strong>，這時候 <strong>Controller</strong> 將這個消息告訴 <strong>Model</strong>，並請 <strong>Model</strong> 檢查使用者輸入的帳號密碼是否正確，<strong>Model</strong> 收到指令後會去和 DB 確認，確認完之後會將結果傳回給 <strong>Controller</strong>（可能是帳號密碼正確或錯誤），<strong>Controller</strong> 再把這個結果給 <strong>View</strong>，<strong>View</strong> 就能根據結果顯示在網頁上，如果成功就順利登入，如果帳號密碼錯誤就顯示失敗。</p>

<p>下面這個圖，加上了前端和後端，<strong>View</strong> 負責的內容會是使用者看到的畫面（前端），而 <strong>Controller</strong> 和 <strong>Model</strong> 是使用者不會注意到背後運作的東西，而與 DB 拿資料就是 <strong>Model</strong> 的任務。</p>

<p><img src="https://dotblogsfile.blob.core.windows.net/user/%E5%B7%A5%E7%A8%8B%E8%89%AF%E7%94%B0/ec9b5c12-03c6-4658-a3f2-85f4bdeaf371/1538274044_80461.png" alt="" width="90%" heigh="90%" />
<a href="https://dotblogs.com.tw/armycoding/2018/09/29/164045">圖片來源</a></p>

<hr />

<h2 id="model-view-controller">Model, View, Controller</h2>

<p>下面再來詳細的介紹一下 MVC 它們的工作內容。</p>

<h3 id="controller">Controller</h3>

<p>從上面的圖例我們知道 Controller 是負責接收使用者的 request 並將資料分配給 Model 和 View 的重要角色。它將使用者的 request 傳給 Model，請 Model 去拿取資料，之後再將 Model 給的資料送給 View，讓 View 將資料呈現在前端讓使用者可以看到。</p>

<p>因此 Controller 決定了整個任務的工作流程，並決定最後如何呈現。下面幾個來自「<a href="https://tw.alphacamp.co/blog/mvc-model-view-controller">MVC 架構是什麼？認識 Model-View-Controller 軟體設計模式</a>」的例子</p>

<ul>
  <li>使用者是否需要先登入 (認證) 才可以看到網頁內容？</li>
  <li>使用者是否只能閱讀資料，但不能修改或刪除？</li>
  <li>使用者新增了資料之後，會重新導向至哪個頁面？</li>
</ul>

<h3 id="model">Model</h3>

<p>Model 主要負責和資料庫溝通以及商業邏輯有關的任務。Model 可以直接對資料庫做存取，但它並不關心資料之後如何被顯示或操作。而所謂的商業邏輯可以這樣理解，假設今天有一個滿千折打九折的折扣，像這樣的「商業邏輯」就可以使用一個 model 去處理使用者的訂單；又或者今天在寫一個部落格的網站，就可以有 <em>post</em> 和 <em>comment</em> 這兩個 model 去對資料庫寫進新的文章和留言的功能。</p>

<h3 id="view">View</h3>

<p>網頁的前端，使用者看到的部分，也就是 HTML 的部分。</p>

<hr />

<h2 id="mvc-優點">MVC 優點</h2>

<ul>
  <li>不管是誰寫，檔案存放的邏輯不會差太多</li>
  <li>程式碼可以重複利用（reusable）</li>
  <li>更容易維護程式碼</li>
  <li>方便團隊合作：團隊各在開發時可以各自負責不同部分，不會互相影響</li>
</ul>

<hr />

<h2 id="route-與-mvc-框架">Route 與 MVC 框架</h2>

<p>前面介紹的 MVC 架構當使用者送出 request 後是直接由 <strong>Controller</strong> 去接收做處理，但如果網頁的 request 是由 <strong>Route</strong> 去處理，這樣 <strong>Controller</strong> 接收的訊息就會是由 <strong>Route</strong> 傳送過來的，但其他的工作內容基本上和前面介紹的 MVC 是一樣的。</p>

<p>如果想要具體的了解可以看這篇「<a href="https://ithelp.ithome.com.tw/articles/10194968">Node.js-Backend 見聞錄(10)：關於後端觀念(六)-關於 MVC </a>」，比較具體地介紹 node.js route 的 MVC 架構。</p>

<p><img src="https://2.bp.blogspot.com/-gX62WAgkWWs/VIXBRs6w6SI/AAAAAAAAAvM/hmx8361at9k/s1600/laravel-mvc-components.png" alt="" width="90%" heigh="90%" />
<a href="https://tutorial-4-php.blogspot.com/2014/12/model-view-controller-mvc.html">圖片來源</a></p>

<p>*上圖 Routing 上面的「Laravel」是 PHP 的一個 web framwork，因為圖片來源的文章是在講解 PHP。</p>

<hr />

<ul>
  <li><a href="https://tutorial-4-php.blogspot.com/2014/12/model-view-controller-mvc.html">Model-View-Controller (MVC) </a></li>
  <li><a href="https://tw.alphacamp.co/blog/mvc-model-view-controller">MVC 架構是什麼？認識 Model-View-Controller 軟體設計模式</a></li>
  <li><a href="https://ithelp.ithome.com.tw/articles/10191216">[Day 01] 什麼是 MVC？能吃嗎？ </a></li>
  <li><a href="https://www.ibest.tw/mvc-website.php">什麼是 MVC 網頁設計? 做網站一定需要 MVC 嗎?</a></li>
  <li><a href="https://www.youtube.com/watch?v=zW_tZR0Ir3Q">Node.js Crash Course Tutorial #11 - Express Router &amp; MVC</a></li>
</ul>
:ET