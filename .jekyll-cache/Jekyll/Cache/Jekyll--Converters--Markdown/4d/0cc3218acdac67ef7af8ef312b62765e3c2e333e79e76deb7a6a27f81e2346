I"◊2<p>We know there are several common types in R, such as, vector, list, matrix, and data.frame.
<br />
Here I‚Äôm going to see these 4 types more details.</p>

<ol>
  <li>What are the differences between vector, list, matrix, and data.frame?</li>
  <li>What are the outputs of <code class="language-plaintext highlighter-rouge">is.atomic()</code> and <code class="language-plaintext highlighter-rouge">is.vector()</code>?</li>
  <li>What are the outputs of <code class="language-plaintext highlighter-rouge">typeof()</code>?</li>
</ol>

<hr />

<h3 id="1-what-are-the-differences-between-vector-list-matrix-and-dataframe">1. What are the differences between <em>vector</em>, <em>list</em>, <em>matrix</em>, and <em>data.frame</em>?</h3>

<p>We can seperate these four types to two groups from different aspects.</p>

<p><strong>(a) Elements type aspect</strong></p>
<ul>
  <li>Homogeneous data: <em>vector</em>, <em>matrix</em></li>
  <li>Heterogeneous data: <em>list</em>, <em>data.frame</em></li>
</ul>

<p>Which means all elements in <em>vector</em> and <em>matrix</em> have to be the same type (integer, double, or character ect.).
But elements in <em>list</em> and <em>data.frame</em> can be different types.</p>

<p>For example:
<br />
Vector has same type of elements</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vector</span><span class="w">
</span><span class="n">v</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="w">
</span><span class="c1">#  v</span><span class="w">
</span><span class="c1"># [1] 1 2 3 4</span><span class="w">

</span><span class="n">v_ch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">)</span><span class="w">
</span><span class="c1"># v_ch</span><span class="w">
</span><span class="c1"># [1] "a" "b" "c"</span><span class="w">
</span></code></pre></div></div>
<p>What if we give a vector different type of elements?</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">v</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"2"</span><span class="p">)</span><span class="w">
</span><span class="c1"># v</span><span class="w">
</span><span class="c1">#[1] "1" "2"</span><span class="w">
</span></code></pre></div></div>
<p>As you can see, R forces 1 to be character.</p>

<p>But what is the priority? Why not ‚Äú2‚Äù become numeric?</p>

<p>Because <strong>the hierarchy for coercion</strong> is:
<br /></p>
<ul>
  <li><strong>logical &lt; integer &lt; numeric &lt; character</strong></li>
</ul>

<p>So this is why numeric would be force to character.</p>

<p><a href="https://campus.datacamp.com/courses/introduction-to-r-for-finance/vectors-and-matrices?ex=3">reference</a></p>

<p><strong>(b) Dimension aspect</strong></p>
<ul>
  <li>1 Dimension: <em>vector</em>, <em>list</em></li>
  <li>2 Dimensions: <em>matrix</em>, <em>data.frame</em></li>
</ul>

<hr />

<h3 id="2-what-are-the-outputs-of-isatomic-and-isvector">2. What are the outputs of <code class="language-plaintext highlighter-rouge">is.atomic()</code> and <code class="language-plaintext highlighter-rouge">is.vector()</code>?</h3>

<p>Let‚Äôs see the outputs of these four types.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">v</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="w"> </span><span class="c1"># vector</span><span class="w">
</span><span class="n">l</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">)</span><span class="w"> </span><span class="c1"># list</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="c1"># matrix</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="c1"># data.frame</span><span class="w">
</span></code></pre></div></div>

<p><strong>(a) is.atomic()</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># &gt; is.atomic(v)</span><span class="w">
</span><span class="c1"># [1] TRUE</span><span class="w">
</span><span class="c1"># &gt; is.atomic(l)</span><span class="w">
</span><span class="c1"># [1] FALSE</span><span class="w">
</span><span class="c1"># &gt; is.atomic(mat)</span><span class="w">
</span><span class="c1"># [1] TRUE</span><span class="w">
</span><span class="c1"># &gt; is.atomic(df)</span><span class="w">
</span><span class="c1"># [1] FALSE</span><span class="w">
</span></code></pre></div></div>
<p>As you can see the results, <code class="language-plaintext highlighter-rouge">is.atomic()</code> gives boolean values.
<br />
And the output is to see if the object is <em>Homogeneous data</em> or <em>Hetergeneous data</em>.
<br />
Hence, <em>vector</em> and <em>matrix</em> get TRUE, <em>list</em> and <em>data.frame</em> get FALSE.</p>

<p><strong>(b) is.vector()</strong></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># is.vector(v)</span><span class="w">
</span><span class="c1"># [1] TRUE</span><span class="w">
</span><span class="c1"># is.vector(l)</span><span class="w">
</span><span class="c1"># [1] TRUE</span><span class="w">
</span><span class="c1"># is.vector(mat)</span><span class="w">
</span><span class="c1"># [1] FALSE</span><span class="w">
</span><span class="c1"># is.vector(df)</span><span class="w">
</span><span class="c1"># [1] FALSE</span><span class="w">
</span></code></pre></div></div>
<p>In contrast with is.atomic(), <code class="language-plaintext highlighter-rouge">is.vector()</code> checks from Dimension aspect.</p>

<hr />

<h3 id="3-what-are-the-outputs-of-typeof">3. What are the outputs of <code class="language-plaintext highlighter-rouge">typeof()</code></h3>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vector</span><span class="w">
</span><span class="n">v</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="w">  </span><span class="c1"># all elements are numeric</span><span class="w">
</span><span class="n">v_ch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">,</span><span class="w"> </span><span class="s2">"c"</span><span class="p">)</span><span class="w">  </span><span class="c1"># all elements are characters</span><span class="w">
</span><span class="c1"># list</span><span class="w">
</span><span class="n">l</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">4</span><span class="p">)</span><span class="w">  </span><span class="c1"># all elements are numeric</span><span class="w">
</span><span class="n">l_ch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"b"</span><span class="p">)</span><span class="w"> </span><span class="c1"># all elements are characters</span><span class="w">
</span><span class="c1"># matrix</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">  </span><span class="c1"># all elements are numeric</span><span class="w">
</span><span class="n">mat_ch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span><span class="w"> </span><span class="s2">"b"</span><span class="p">),</span><span class="w"> </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">  </span><span class="c1"># all elements are characters</span><span class="w">
</span><span class="c1"># data.frame</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>
<p>Let‚Äôs see the results,</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ---vector-------------</span><span class="w">
</span><span class="c1"># &gt; typeof(v)</span><span class="w">
</span><span class="c1"># [1] "integer"</span><span class="w">
</span><span class="c1"># &gt; typeof(v_ch)</span><span class="w">
</span><span class="c1"># [1] "character"</span><span class="w">
</span><span class="c1"># ---list-------------</span><span class="w">
</span><span class="c1"># &gt; typeof(l)</span><span class="w">
</span><span class="c1"># [1] "list"</span><span class="w">
</span><span class="c1"># &gt; typeof(l_ch)</span><span class="w">
</span><span class="c1"># [1] "list"</span><span class="w">
</span><span class="c1"># ---matrix-------------</span><span class="w">
</span><span class="c1"># &gt; typeof(mat)</span><span class="w">
</span><span class="c1"># [1] "integer"</span><span class="w">
</span><span class="c1"># &gt; typeof(mat_ch)</span><span class="w">
</span><span class="c1"># [1] "character"</span><span class="w">
</span><span class="c1"># ---data.frame-------------</span><span class="w">
</span><span class="c1"># &gt; typeof(df)</span><span class="w">
</span><span class="c1"># [1] "list"</span><span class="w">
</span></code></pre></div></div>

<p>From the result of ouputs, we can see it checks if the object is <em>Homogeneous data</em> or not.
<br />
If it is <em>Homogeneous data</em> then <code class="language-plaintext highlighter-rouge">typeof()</code> will show the type of elements.
<br />
But if the object is <em>Hetergeneous data</em>, it will give only <em>list</em> as output result.</p>

<hr />

<p>More detail about Data Structure can be found <a href="http://adv-r.had.co.nz/Data-structures.html">here</a></p>

<p>Reference:
<br />
<a href="https://zhuanlan.zhihu.com/p/25551827">RÊ∑±ÂÖ•|Êï∞ÊçÆÁ±ªÂûã</a></p>

:ET